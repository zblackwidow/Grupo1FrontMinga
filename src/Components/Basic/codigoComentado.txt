  /*let infoUser = JSON.parse(localStorage.getItem('userManga'))
    console.log(infoUser)
    let token = infoUser?.token
    let idUser = infoUser?.user?.id
    let idUser2 = infoUser?.user?._id

    console.log(token)
    console.log(idUser)
    console.log(idUser2)

    let cont = "";
    console.log(cont);

    if (!idUser) {
        cont = idUser2
        
    }else if (!idUser2) {
        cont = idUser
    }

    console.log(cont)
    console.log(token)

    useEffect(() => {
        if (cont) {
            dispatch(getUserById({ cont, token }))
        }
    }, [])

    //dispatch(getUserById({ cont, token }))

    

    console.log(user)

    const [autor, setAutor] = useState(null)

    
    React.useEffect(() => {
        const res = axios
            .get(`http://localhost:8080/api/author/idUser/${cont}`, {
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            })
            .then((res) => {
                setAutor(res.data)
            })
            .catch((error) => {
                console.error(error)
            })
    }, [setAutor,cont, idUser, token])

    console.log(autor)*/

    
**/panel**/

import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { getCompanies, updateCompany } from "../Store/actions/companyActions";
import { getAuthors, updateAuthor } from "../Store/actions/authorActions";

const Panel = () => {
  const [view, setView] = useState("companies");
  const [localCompanies, setLocalCompanies] = useState([]);
  const [localAuthors, setLocalAuthors] = useState([]);
  const { companies } = useSelector((state) => state.company);
  const { authors } = useSelector((state) => state.author);

  const tokenData = JSON.parse(localStorage.getItem("userManga"));
  const token = tokenData.token;
  const tokenString = JSON.stringify(token);
  const [imageSrc, setImageSrc] = useState(auth.photo);
  const defaultImage =
    "https://img.freepik.com/vector-premium/icono-perfil-simple-color-blanco-icono_1076610-50204.jpg?semt=ais_hybrid";
  const handleError = () => {
    setImageSrc(defaultImage);
  };

  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(getCompanies(token));
    dispatch(getAuthors(token));
  }, [dispatch]);

  useEffect(() => {
    if (companies) {
      setLocalCompanies(companies);
    }
  }, [companies]);

  useEffect(() => {
    if (Array.isArray(authors)) {
      setLocalAuthors(authors);
    }
  }, [authors]);

  const handleToggleActive = (company) => {
    const updatedCompany = { ...company, active: !company.active };

    dispatch(
      updateCompany(
        { _id: company._id, active: updatedCompany.active },
        tokenString
      )
    );

    setLocalCompanies((prevCompanies) =>
      prevCompanies.map((comp) =>
        comp._id === company._id ? updatedCompany : comp
      )
    );
  };

  const handleToggleActiveAuthor = (author) => {
    const updatedAuthor = { ...author, active: !author.active };

    dispatch(
      updateAuthor({
        author: { _id: author._id, active: updatedAuthor.active },
        token: tokenString,
      })
    );

    setLocalAuthors((prevAuthors) =>
      prevAuthors.map((auth) =>
        auth._id === author._id ? updatedAuthor : auth
      )
    );
  };

  return (
    <div className="">
      <div className="w-full h-min-screen bg-[length:w-full_721px] bg-no-repeat bg-panel px-10">
        <h1 className="flex justify-center items-center text-[64px] text-white pt-[260px] h-[500px]">
          Panel
        </h1>
        <div className="bg-[#FFFFFF] rounded-lg min-h-[500px] flex-col items-center w-full justify-center p-20">
          <div className="w-full text-center flex justify-center">
            <h1 className="text-[#FF5722] text-[32px] w-fit  font-semibold border-b-[5px] border-[#FF5722] mb-8">
              Entities
            </h1>
          </div>
          <div className="px-20">
            <section className="grid grid-cols-2 border-solid border-t-2 border-r-2 border-l-2 rounded-t-lg border-gray-300 ">
              <button
                onClick={() => setView("companies")}
                className={`text-[24px] py-3 font-semibold ${
                  view === "companies"
                    ? " text-[#ffffff] bg-[#FF5722] rounded-tl-lg "
                    : "border-b-[3px] text-[#FF5722] rounded-tl-lg bg-[#F9F9FC] border-[#FF5722]"
                }`}
              >
                Companies
              </button>
              <button
                onClick={() => setView("authors")}
                className={`text-[24px] font-semibold ${
                  view === "authors"
                    ? "text-[#ffffff] bg-[#FF5722] rounded-tr-lg"
                    : "border-b-[3px] text-[#FF5722] rounded-tr-lg bg-[#F9F9FC] border-[#FF5722]"
                }`}
              >
                Authors
              </button>
            </section>
            <table className="w-full border-collapse border border-gray-300">
              {view === "companies" ? (
                <tbody>
                  {localCompanies.map((company) => (
                    <tr key={company._id} className="bg-[#F9F9FC]">
                      <td className="border border-gray-300 w-[300px] border-r-transparent p-2">
                        {company.name}
                      </td>
                      <td className="border w-72 border-gray-300 border-r-transparent p-2">
                        <span className="block overflow-hidden text-ellipsis whitespace-nowrap">
                          {company.website}
                        </span>
                      </td>
                      <td className="border border-gray-300 p-2">
                        <img
                          src={company.photo}
                          alt={company.name}
                          className="w-8 h-8 rounded-full"
                        />
                      </td>
                      <td className="border border-gray-300 p-2 text-center">
                        <label className="relative inline-flex items-center cursor-pointer">
                          <input
                            type="checkbox"
                            className="sr-only peer"
                            checked={company.active}
                            onChange={() => handleToggleActive(company)}
                          />
                          <div class="group peer bg-gray-200 rounded-full duration-300 w-10 h-5 ring-2 ring-gray-200 after:duration-300 after:bg-white peer-checked:bg-[#FF5722] peer-checked:ring-[#FF5722] after:rounded-full after:absolute after:h-4 after:w-4 after:top-[2px] after:left-[2px] after:flex after:justify-center after:items-center peer-checked:after:translate-x-5 peer-hover:after:scale-95"></div>
                        </label>
                      </td>
                    </tr>
                  ))}
                </tbody>
              ) : (
                <tbody>
                  {localAuthors.map((auth) => (
                    <tr key={auth._id} className="bg-[#F9F9FC]">
                      <td className="border border-gray-300 border-r-transparent p-2">
                        {auth.name + " " + auth.lastName}
                      </td>
                      <td className="border border-gray-300 border-r-transparent p-2">
                        {new Date(auth.date).toLocaleDateString()}
                      </td>
                      <td className="border border-gray-300 border-r-transparent p-2">
                        {auth.city}
                      </td>
                      <td className="border border-gray-300 p-2">
                        <img
                          src={imageSrc}
                          alt={auth.name}
                          onError={handleError}
                          className="w-8 h-8 rounded-full border-r-transparent mx-auto"
                        />
                      </td>
                      <td className="border border-gray-300 p-2">
                        <div className="flex justify-center items-center">
                          <label className="relative inline-flex items-center cursor-pointer">
                            <input
                              type="checkbox"
                              className="sr-only peer"
                              checked={auth.active}
                              onChange={() => handleToggleActiveAuthor(auth)}
                            />
                            <div className="group peer bg-gray-200 rounded-full duration-300 w-10 h-5 ring-2 ring-gray-200 after:duration-300 after:bg-white peer-checked:bg-[#FF5722] peer-checked:ring-[#FF5722] after:rounded-full after:absolute after:h-4 after:w-4 after:top-[2px] after:left-[2px] after:flex after:justify-center after:items-center peer-checked:after:translate-x-5 peer-hover:after:scale-95"></div>
                          </label>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              )}
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Panel;
